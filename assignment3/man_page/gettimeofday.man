%!PS-Adobe-3.0
%%Creator: groff version 1.22.4
%%CreationDate: Fri Nov 25 07:34:49 2022
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Courier
%%+ font Courier-Bold
%%DocumentSuppliedResources: procset grops 1.22 4
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: Default 595 842 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.22 4
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 595 842 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Bold
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 841.89 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron
/Zcaron/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Courier-Bold@0 ENC0/Courier-Bold RE/Courier@0 ENC0/Courier RE
/Times-Italic@0 ENC0/Times-Italic RE/Times-Bold@0 ENC0/Times-Bold RE
/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(GETTIMEOFD)72 48 Q -1.05(AY)-.4 G 84.92
(\(2\) Linux)1.05 F(Programmer')2.5 E 2.5(sM)-.55 G 84.92
(anual GETTIMEOFD)-2.5 F -1.05(AY)-.4 G(\(2\))1.05 E/F1 10.95
/Times-Bold@0 SF -.219(NA)72 84 S(ME).219 E F0(gettimeofday)108 96 Q 2.5
(,s)-.65 G(ettimeofday \255 get / set time)-2.5 E F1(SYNOPSIS)72 112.8 Q
/F2 10/Times-Bold@0 SF(#include <sys/time.h>)108 124.8 Q
(int gettimeofday\(struct time)108 141.6 Q -.1(va)-.15 G 2.5(l*).1 G/F3
10/Times-Italic@0 SF(tv)-2.37 E F2 2.5(,s).32 G(truct timezone *)-2.5 E
F3(tz).13 E F2(\);).41 E(int settimeofday\(const struct time)108 158.4 Q
-.1(va)-.15 G 2.5(l*).1 G F3(tv)-2.37 E F2 2.5(,c).32 G
(onst struct timezone *)-2.5 E F3(tz).13 E F2(\);).41 E F0(Feature T)88
175.2 Q(est Macro Requirements for glibc \(see)-.7 E F2(featur)2.5 E
(e_test_macr)-.18 E(os)-.18 E F0(\(7\)\):)A F2(settimeofday)108 192 Q F0
(\(\):)A(Since glibc 2.19:)118 204 Q(_DEF)128 216 Q -.55(AU)-.74 G -.92
(LT).55 G(_SOURCE).92 E(Glibc 2.19 and earlier:)118 228 Q(_BSD_SOURCE)
128 240 Q F1(DESCRIPTION)72 256.8 Q F0(The functions)108 268.8 Q F2
(gettimeofday)2.5 E F0(\(\) and)A F2(settimeofday)2.5 E F0
(\(\) can get and set the time as well as a timezone.)A(The)108 285.6 Q
F3(tv)2.63 E F0(ar)2.82 E(gument is a)-.18 E F3(struct time)2.84 E(val)
-.15 E F0(\(as speci\214ed in)3.01 E F3(<sys/time)2.16 E(.h>)-.15 E F0
(\):)A/F4 10/Courier@0 SF(struct timeval {)128 302.4 Q 30
(time_t tv_sec;)152 314.4 R(/* seconds */)30 E(suseconds_t tv_usec;)152
326.4 Q(/* microseconds */)24 E(};)128 338.4 Q F0(and gi)108 355.2 Q
-.15(ve)-.25 G 2.5(st).15 G
(he number of seconds and microseconds since the Epoch \(see)-2.5 E F2
(time)2.5 E F0(\(2\)\).)A(The)108 372 Q F3(tz)2.63 E F0(ar)2.91 E
(gument is a)-.18 E F3(struct timezone)2.84 E F0(:).18 E F4
(struct timezone {)128 388.8 Q(int tz_minuteswest;)152 400.8 Q
(/* minutes west of Greenwich */)30 E(int tz_dsttime;)152 412.8 Q
(/* type of DST correction */)54 E(};)128 424.8 Q F0 .41(If either)108
441.6 R F3(tv)3.04 E F0(or)3.23 E F3(tz)3.04 E F0 .41
(is NULL, the corresponding structure is not set or returned.)3.32 F
(\(Ho)5.41 E(we)-.25 E -.15(ve)-.25 G 1.21 -.4(r, c).15 H .41
(ompilation w).4 F(arn-)-.1 E(ings will result if)108 453.6 Q F3(tv)2.63
E F0(is NULL.\))2.82 E .228(The use of the)108 470.4 R F3(timezone)2.859
E F0 .229(structure is obsolete; the)2.909 F F3(tz)2.859 E F0(ar)3.139 E
.229(gument should normally be speci\214ed as NULL.)-.18 F(\(See)5.229 E
(NO)108 482.4 Q(TES belo)-.4 E -.65(w.)-.25 G(\)).65 E 1.037
(Under Linux, there are some peculiar "w)108 499.2 R 1.037
(arp clock" semantics associated with the)-.1 F F2(settimeofday)3.537 E
F0 1.036(\(\) system)B .288(call if on the v)108 511.2 R .288
(ery \214rst call \(after booting\) that has a non-NULL)-.15 F F3(tz)
2.918 E F0(ar)3.198 E .288(gument, the)-.18 F F3(tv)2.918 E F0(ar)3.108
E .288(gument is NULL and)-.18 F(the)108 523.2 Q F3(tz_minuteswest)2.957
E F0 .327(\214eld is nonzero.)3.507 F(\(The)5.327 E F3(tz_dsttime)2.957
E F0 .327(\214eld should be zero for this case.\))3.007 F .326
(In such a case it is)5.327 F .096(assumed that the CMOS clock is on lo\
cal time, and that it has to be incremented by this amount to get UTC)
108 535.2 R(system time.)108 547.2 Q
(No doubt it is a bad idea to use this feature.)5 E F1(RETURN V)72 564 Q
(ALUE)-1.478 E F2(gettimeofday)108 576 Q F0 .17(\(\) and)B F2
(settimeofday)2.67 E F0 .17(\(\) return 0 for success, or \2551 for f)B
.169(ailure \(in which case)-.1 F F3(errno)2.859 E F0 .169
(is set appro-)2.849 F(priately\).)108 588 Q F1(ERR)72 604.8 Q(ORS)-.329
E F2(EF)108 616.8 Q -.5(AU)-.9 G -.92(LT).5 G F0(One of)144 628.8 Q F3
(tv)2.63 E F0(or)2.82 E F3(tz)2.63 E F0
(pointed outside the accessible address space.)2.91 E F2(EINV)108 645.6
Q(AL)-1.35 E F0(\()144 657.6 Q F2(settimeofday)A F0(\(\)\):)A F3
(timezone)2.63 E F0(is in)2.68 E -.25(va)-.4 G(lid.).25 E F2(EINV)108
674.4 Q(AL)-1.35 E F0(\()144 686.4 Q F2(settimeofday)A F0(\(\)\):)A F3
(tv)2.63 E(.tv_sec)-.74 E F0(is ne)2.81 E -.05(ga)-.15 G(ti).05 E .3
-.15(ve o)-.25 H(r).15 E F3(tv)2.63 E(.tv_usec)-.74 E F0
(is outside the range [0..999,999].)2.81 E F2(EINV)108 703.2 Q(AL)-1.35
E F0(\(since Linux 4.3\))2.5 E(\()144 715.2 Q F2(settimeofday)A F0 .216
(\(\)\): An attempt w)B .217(as made to set the time to a v)-.1 F .217
(alue less than the current v)-.25 F .217(alue of the)-.25 F F2
(CLOCK_MONO)144 727.2 Q -.18(TO)-.4 G(NIC).18 E F0(clock \(see)2.5 E F2
(clock_gettime)2.5 E F0(\(2\)\).)A 184.28(Linux 2019-03-06)72 768 R(1)
205.67 E 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(GETTIMEOFD)72 48 Q -1.05(AY)-.4 G 84.92
(\(2\) Linux)1.05 F(Programmer')2.5 E 2.5(sM)-.55 G 84.92
(anual GETTIMEOFD)-2.5 F -1.05(AY)-.4 G(\(2\))1.05 E/F1 10/Times-Bold@0
SF(EPERM)108 84 Q F0 5.231(The calling process has insuf)144 96 R 5.231
(\214cient pri)-.25 F(vile)-.25 E 5.231(ge to call)-.15 F F1
(settimeofday)7.731 E F0 5.231(\(\); under Linux the)B F1(CAP_SYS_TIME)
144 108 Q F0(capability is required.)2.5 E/F2 10.95/Times-Bold@0 SF
(CONFORMING T)72 124.8 Q(O)-.197 E F0 1.577(SVr4, 4.3BSD.)108 136.8 R
1.578(POSIX.1-2001 describes)6.577 F F1(gettimeofday)4.078 E F0 1.578
(\(\) b)B 1.578(ut not)-.2 F F1(settimeofday)4.078 E F0 4.078
(\(\). POSIX.1-2008)B(marks)4.078 E F1(gettimeofday)108 148.8 Q F0
(\(\) as obsolete, recommending the use of)A F1(clock_gettime)2.5 E F0
(\(2\) instead.)A F2(NO)72 165.6 Q(TES)-.438 E F0 .087
(The time returned by)108 177.6 R F1(gettimeofday)2.587 E F0(\(\))A/F3
10/Times-Italic@0 SF(is)2.597 E F0(af)2.857 E .086
(fected by discontinuous jumps in the system time \(e.g., if the sys-)
-.25 F .881(tem administrator manually changes the system time\).)108
189.6 R .882(If you need a monotonically increasing clock, see)5.881 F
F1(clock_gettime)108 201.6 Q F0(\(2\).)A(Macros for operating on)108
218.4 Q F3(time)2.63 E(val)-.15 E F0(structures are described in)3.01 E
F1(timeradd)2.5 E F0(\(3\).)A -.35(Tr)108 235.2 S(aditionally).35 E 2.5
(,t)-.65 G(he \214elds of)-2.5 E F3(struct time)2.84 E(val)-.15 E F0
(were of type)3.01 E F3(long)2.59 E F0(.).22 E F1 2.5(Cl)87 252 S
(ibrary/k)-2.5 E(er)-.1 E(nel differ)-.15 E(ences)-.18 E F0
(On some architectures, an implementation of)108 264 Q F1(gettimeofday)
2.5 E F0(\(\) is pro)A(vided in the)-.15 E F1(vdso)2.5 E F0(\(7\).)A F1
(The tz_dsttime \214eld)87 280.8 Q F0 .419(On a non-Linux k)108 292.8 R
.419(ernel, with glibc, the)-.1 F F3(tz_dsttime)3.049 E F0 .418
(\214eld of)3.099 F F3 .418(struct timezone)3.258 F F0 .418
(will be set to a nonzero v)3.098 F .418(alue by)-.25 F F1(gettimeofday)
108 304.8 Q F0 1.24(\(\) if the current timezone has e)B -.15(ve)-.25 G
3.74(rh).15 G 1.241(ad or will ha)-3.74 F 1.541 -.15(ve a d)-.2 H 1.241
(aylight sa).15 F 1.241(ving rule applied.)-.2 F 1.241(In this)6.241 F
.506(sense it e)108 316.8 R .506(xactly mirrors the meaning of)-.15 F F1
(daylight)3.005 E F0 .505(\(3\) for the current zone.)B .505
(On Linux, with glibc, the setting)5.505 F .443(of the)108 328.8 R F3
(tz_dsttime)3.073 E F0 .443(\214eld of)3.123 F F3 .443(struct timezone)
3.283 F F0 .443(has ne)3.123 F -.15(ve)-.25 G 2.943(rb).15 G .443
(een used by)-2.943 F F1(settimeofday)2.944 E F0 .444(\(\) or)B F1
(gettimeofday)2.944 E F0 2.944(\(\). Thus,)B(the follo)108 340.8 Q
(wing is purely of historical interest.)-.25 E .355
(On old systems, the \214eld)108 357.6 R F3(tz_dsttime)2.985 E F0 .355
(contains a symbolic constant \(v)3.035 F .355(alues are gi)-.25 F -.15
(ve)-.25 G 2.855(nb).15 G(elo)-2.855 E .355(w\) that indicates in)-.25 F
.018(which part of the year Daylight Sa)108 369.6 R .018(ving T)-.2 F
.018(ime is in force.)-.35 F .019(\(Note: this v)5.018 F .019
(alue is constant throughout the year: it)-.25 F .109(does not indicate\
 that DST is in force, it just selects an algorithm.\))108 381.6 R .108
(The daylight sa)5.108 F .108(ving time algorithms de-)-.2 F
(\214ned are as follo)108 393.6 Q(ws:)-.25 E/F4 10/Courier-Bold@0 SF
(DST_NONE)128 410.4 Q/F5 10/Courier@0 SF(/* not on DST */)30 E F4
(DST_USA)128 422.4 Q F5(/* USA style DST */)36 E F4(DST_AUST)128 434.4 Q
F5(/* Australian style DST */)30 E F4(DST_WET)128 446.4 Q F5
(/* Western European DST */)36 E F4(DST_MET)128 458.4 Q F5
(/* Middle European DST */)36 E F4(DST_EET)128 470.4 Q F5
(/* Eastern European DST */)36 E F4(DST_CAN)128 482.4 Q F5(/* Canada */)
36 E F4(DST_GB)128 494.4 Q F5(/* Great Britain and Eire */)42 E F4
(DST_RUM)128 506.4 Q F5(/* Romania */)36 E F4(DST_TUR)128 518.4 Q F5
(/* Turkey */)36 E F4(DST_AUSTALT)128 530.4 Q F5
(/* Australian style with shift in 1986 */)12 E F0 .262
(Of course it turned out that the period in which Daylight Sa)108 547.2
R .262(ving T)-.2 F .262(ime is in force cannot be gi)-.35 F -.15(ve)
-.25 G 2.762(nb).15 G 2.762(yas)-2.762 G(im-)-2.762 E .86(ple algorithm\
, one per country; indeed, this period is determined by unpredictable p\
olitical decisions.)108 559.2 R(So)5.86 E
(this method of representing timezones has been abandoned.)108 571.2 Q
F2(SEE ALSO)72 588 Q F1(date)108 600 Q F0(\(1\),)A F1(adjtimex)7.365 E
F0(\(2\),)A F1(clock_gettime)7.365 E F0(\(2\),)A F1(time)7.366 E F0
(\(2\),)A F1(ctime)7.366 E F0(\(3\),)A F1(ftime)7.366 E F0(\(3\),)A F1
(timeradd)7.366 E F0(\(3\),)A F1(capabilities)7.366 E F0(\(7\),)A F1
(time)108 612 Q F0(\(7\),)A F1(vdso)2.5 E F0(\(7\),)A F1(hwclock)2.5 E
F0(\(8\))A F2(COLOPHON)72 628.8 Q F0 .341
(This page is part of release 5.10 of the Linux)108 640.8 R F3(man-pa)
3.221 E -.1(ge)-.1 G(s).1 E F0 2.84(project. A)3.11 F .34
(description of the project, information)2.84 F 11.103
(about reporting b)108 652.8 R 11.103(ugs, and the latest v)-.2 F 11.103
(ersion of this page, can be found at)-.15 F(https://www)108 664.8 Q(.k)
-.65 E(ernel.or)-.1 E(g/doc/man\255pages/.)-.18 E 184.28
(Linux 2019-03-06)72 768 R(2)205.67 E 0 Cg EP
%%Trailer
end
%%EOF
